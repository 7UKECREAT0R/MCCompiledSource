{
  "version": 1.20,
  "preprocessor_variables": [
    "_compiler",
    "_minecraft",
    "_realtime",
    "_realdate",
    "_timeformat",
    "_true",
    "_false"
  ],
  "syntax": {
    "extension": "mcc",
    "ignore_case": false,
    "comment_folding": true,
    "compact_folding": false,
    "special_characters": {
      "range_delimiter": "..",
      "invert_delimiter": "!",
      "bracket_open": "[",
      "bracket_close": "]",
      "block_open": "{",
      "block_close": "}",
      "string_delimiters": [
        "\"",
        "'"
      ],
      "escape": "\\",
      "line_comment": "//",
      "multiline_comment_open": "/*",
      "multiline_comment_close": "*/",
      "number_prefixes": [
        "~",
        "^",
        "!",
        ".."
      ],
      "number_suffixes": [
        "h",
        "m",
        "s",
        "t"
      ],
      "operators": [
        "<",
        ">",
        "{",
        "}",
        "=",
        "(",
        ")",
        "+",
        "-",
        "*",
        "/",
        "%",
        "!"
      ]
    },
    "enums": {
      "blocks_scan_mode": "mc_compiled.Commands.BlocksScanMode",
      "dimension": "mc_compiled.Commands.Dimension",
      "anchor_position": "mc_compiled.Commands.AnchorPosition",
      "weather": "mc_compiled.Commands.WeatherState",
      "timespec": "mc_compiled.Commands.TimeSpec",
      "item_slot": "mc_compiled.Commands.ItemSlot",
      "gamerule": "mc_compiled.Commands.GameRule",
      "damage_cause": "mc_compiled.Commands.DamageCause",
      "gamemode": "mc_compiled.Commands.GameMode",
      "old_handling": "mc_compiled.Commands.OldHandling",
      "difficulty": "mc_compiled.Commands.DifficultyMode",
      "clone_mode": "mc_compiled.Commands.CloneMode",
      "easing": "mc_compiled.Commands.Easing",
      "camera_preset": "mc_compiled.Commands.CameraPreset",
      "move_direction": [
        "left",
        "right",
        "up",
        "down",
        "forwards",
        "backwards"
      ],
      "grid_alignment": [
        "x",
        "y",
        "z",
        "xy",
        "xz",
        "yz",
        "xyz"
      ]
    }
  },
  "features": {
    "DUMMIES": {
      "description": "Dummy Entities",
      "details": "Allows the creation of dummy entity behavior/resource files, as well as placing them in the world.",
      "min-version": 1.10,
      "value": 1
    },
    "AUTOINIT": {
      "description": "Auto-Initialization",
      "details": "Runs the initialization file automatically in new worlds, and every time a new build is compiled. Requires a check-function to be run every tick.",
      "min-version": 1.16,
      "value": 2
    },
    "EXPLODE": {
      "description": "Exploding Entities",
      "details": "Allows the creation of exploder entity behavior/resource files. Allows the use of the explode command by generating presets for the entity.",
      "min-version": 1.10,
      "value": 4
    },
    "UNINSTALL": {
      "description": "Uninstall Function",
      "details": "Creates a function that will 'uninstall' the addon from the world; removes tags, scoreboard objectives, dummy entities, etc.",
      "min-version": 1.12,
      "value": 8
    },
    "AUDIOFILES": {
      "description": "Audio Files",
      "details": "Enables support for the 'playsound' command to accept audio files. Definitions will be automatically created and files will be copied to their resulting locations.",
      "min-version": 1.17,
      "value": 16
    }
  },
  "mappings": {
    "*": "Token",
    "any": "TokenLiteral",
    "id": "TokenIdentifier",
    "ppv": "TokenIdentifierPreprocessor",
    "macro": "TokenIdentifierMacro",
    "enum": "TokenIdentifierEnum",
    "value": "TokenIdentifierValue",
    "object": "IPreprocessor",
    "compare": "TokenCompare",
    "int": "TokenIntegerLiteral",
    "number": "TokenNumberLiteral",
    "string": "TokenStringLiteral",
    "bool": "TokenBooleanLiteral",
    "selector": "TokenSelectorLiteral",
    "coordinate": "TokenCoordinateLiteral",
    "range": "TokenRangeLiteral",
    "json": "TokenJSONLiteral",
    "not": "TokenNot",
    "equals": "TokenAssignment",
    "open_paren": "TokenOpenParenthesis",
    "close_paren": "TokenCloseParenthesis",
    "awaitable": "TokenAwaitable",
    "attribute": "TokenAttribute",
    "block": "_block"
  },
  "categories": {
    "preprocessor": "Commands that allow the user to do things at compile time. Preprocessor commands generally start with a `$` and are highlighted differently than regular commands.",
    "text": "Commands which display text to players through format-strings, or manipulate text otherwise.",
    "entities": "Commands which manipulate, spawn, and transform entities in various ways.",
    "blocks": "Commands which interact with the Minecraft world's blocks.",
    "items": "Commands relating to entity/player items and inventories.",
    "cosmetic": "Commands that add visual and auditory appeal to the user's code.",
    "values": "Commands tied directly to values. Values can be used in if-statements, format-strings, and many other places.",
    "logic": "Commands which handle logic and code flow. The butter for all the bread (code).",
    "debug": "Commands related to testing, debugging and all-around solidifying code.",
    "features": "Commands related to the optionally enable-able features in the language.",
    "other": "The other commands that don't have a good designation."
  },
  "directives": {
    "$var": {
      "description": "Set Preprocessor Variable",
      "wiki_link": "Preprocessor.md",
      "details": "Sets a preprocessor variable to the value(s) provided.",
      "category": "preprocessor",
      "function": "_var",
      "syntax": [
        "variable:id",
        "values:object[]"
      ]
    },
    "$inc": {
      "description": "Increment Preprocessor Variable",
      "wiki_link": "Simple-Variable-Commands.md#inc-dec",
      "details": "Increments the given preprocessor variable by one. If multiple values are held, they are all incremented.",
      "category": "preprocessor",
      "function": "_inc",
      "syntax": [
        "variable:ppv"
      ],
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$dec": {
      "description": "Decrement Preprocessor Variable",
      "wiki_link": "Simple-Variable-Commands.md#inc-dec",
      "details": "Decrements the given preprocessor variable by one. If multiple values are held, they are all decremented.",
      "category": "preprocessor",
      "function": "_dec",
      "syntax": [
        "variable:ppv"
      ],
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$add": {
      "description": "Add to Preprocessor Variable",
      "wiki_link": "Simple-Variable-Commands.md#all-of-them",
      "details": "Adds two preprocessor variables/values together, changing only the first one. A += B",
      "category": "preprocessor",
      "function": "_add",
      "syntax": [
        "variable:ppv",
        "values:object[1..]"
      ],
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$sub": {
      "description": "Subtract from Preprocessor Variable",
      "wiki_link": "Simple-Variable-Commands.md#all-of-them",
      "details": "Subtracts two preprocessor variables/values from each other, changing only the first one. A -= B",
      "category": "preprocessor",
      "function": "_sub",
      "syntax": [
        "variable:ppv",
        "values:object[1..]"
      ],
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$mul": {
      "description": "Multiply with Preprocessor Variable",
      "wiki_link": "Simple-Variable-Commands.md#all-of-them",
      "details": "Multiplies two preprocessor variables/values together, changing only the first one. A *= B",
      "category": "preprocessor",
      "function": "_mul",
      "syntax": [
        "variable:ppv",
        "values:object[1..]"
      ],
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$div": {
      "description": "Divide Preprocessor Variable",
      "wiki_link": "Simple-Variable-Commands.md#all-of-them",
      "details": "Divides two preprocessor variables/values from each other, changing only the first one. A /= B",
      "category": "preprocessor",
      "function": "_div",
      "syntax": [
        "variable:ppv",
        "values:object[1..]"
      ],
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$mod": {
      "description": "Modulo Preprocessor Variable",
      "wiki_link": "Simple-Variable-Commands.md#all-of-them",
      "details": "Divides two preprocessor variables/values from each other, setting only the first one to the remainder of the operation. A %= B",
      "category": "preprocessor",
      "function": "_mod",
      "syntax": [
        "variable:ppv",
        "values:object[1..]"
      ],
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$pow": {
      "description": "Exponentiate Preprocessor Variable",
      "wiki_link": "Simple-Variable-Commands.md#all-of-them",
      "details": "Exponentiates two preprocessor variables/values with each other, changing only the first one. A = A^B",
      "category": "preprocessor",
      "function": "_pow",
      "syntax": [
        "variable:ppv",
        "values:object[1..]"
      ],
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$swap": {
      "description": "Swap Preprocessor Variables",
      "wiki_link": "Simple-Variable-Commands.md#other-variable-operations",
      "details": "Swaps the values of two preprocessor variables",
      "category": "preprocessor",
      "function": "_swap",
      "patterns": [
        "a:ppv",
        "b:ppv"
      ],
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$append": {
      "description": "Append to Preprocessor Variable",
      "wiki_link": "Advanced-Variable-Commands.md#array-specific-manipulation",
      "details": "Adds the given item(s) to the end of the given preprocessor variable, or contents of another preprocessor variable if specified.",
      "category": "preprocessor",
      "function": "_append",
      "syntax": {
        "to_modify": {
          "patterns": [
            "array:ppv"
          ]
        },
        "values_to_append": {
          "patterns": [
            [
              "items:object[]"
            ],
            [
              "other:ppv"
            ]
          ]
        }
      },
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$prepend": {
      "description": "Prepend to Preprocessor Variable",
      "wiki_link": "Advanced-Variable-Commands.md#array-specific-manipulation",
      "details": "Adds the given item(s) to the start of the given preprocessor variable.",
      "category": "preprocessor",
      "function": "_prepend",
      "syntax": {
        "to_modify": {
          "patterns": [
            "array:ppv"
          ]
        },
        "values_to_append": {
          "patterns": [
            [
              "items:object[]"
            ],
            [
              "other:ppv"
            ]
          ]
        }
      },
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$if": {
      "description": "Preprocessor If",
      "wiki_link": "Comparison-compile-time.md#using-if",
      "details": "Compares a preprocessor variable and another value/variable. If the source variable contains multiple values, they all must match the condition.",
      "category": "preprocessor",
      "function": "_if",
      "syntax": {
        "a": {
          "patterns": [
            [
              "a:object"
            ],
            [
              "a:ppv"
            ]
          ]
        },
        "comparison": {
          "patterns": [
            "comparison:compare"
          ]
        },
        "b": {
          "patterns": [
            [
              "a:object"
            ],
            [
              "a:ppv"
            ]
          ]
        },
        "code": {
          "patterns": [
            "code:block?"
          ]
        }
      },
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$else": {
      "description": "Preprocessor Else",
      "wiki_link": "Comparison-compile-time.md#using-else",
      "details": "Directly inverts the result of the last $if call at this level in scope.",
      "category": "preprocessor",
      "function": "_else",
      "syntax": [
        "code:block?"
      ],
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$assert": {
      "description": "Preprocessor Assertion",
      "wiki_link": "Debugging.md#assertions",
      "details": "Asserts that the input comparison is true, and throws a compiler error if not. Allows a custom error message.",
      "category": "debug",
      "function": "_assert",
      "syntax": {
        "a": {
          "patterns": [
            [
              "a:object"
            ],
            [
              "a:ppv"
            ]
          ]
        },
        "comparison": {
          "patterns": [
            "comparison:compare"
          ]
        },
        "b": {
          "patterns": [
            [
              "a:object"
            ],
            [
              "a:ppv"
            ]
          ]
        },
        "message": {
          "optional": true,
          "patterns": [
            "message:string"
          ]
        }
      },
      "attributes": [
        "DONT_FLATTEN_ARRAYS",
        "DONT_DECORATE"
      ]
    },
    "$repeat": {
      "description": "Preprocessor Repeat",
      "wiki_link": "Compile-Time-Loops.md#repeat_number",
      "details": "Repeats the following statement/code-block a number of times. If a variable identifier is given, that variable will be set to the index of the current iteration. 0, 1, 2, etc.",
      "category": "preprocessor",
      "function": "_repeat",
      "syntax": {
        "amount": {
          "patterns": [
            [
              "amount:int"
            ],
            [
              "amount:range"
            ]
          ]
        },
        "indicator": {
          "optional": true,
          "patterns": [
            "indicator:id"
          ]
        }
      }
    },
    "$log": {
      "description": "Log to Console",
      "wiki_link": "Debugging.md#logging",
      "details": "Sends a message to stdout with a line terminator at the end.",
      "category": "preprocessor",
      "function": "_log",
      "syntax": [
        "message:*[]"
      ],
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$macro": {
      "description": "Define/Call Macro",
      "wiki_link": "Macros.md#defining-a-macro",
      "details": "If a code-block follows this directive, it is treated as a definition. Arguments are passed in as preprocessor variables. If no code-block follows this call, it will attempt to run the macro with any inputs parameters copied to their respective preprocessor variables.",
      "category": "preprocessor",
      "function": "_macro",
      "syntax": {
        "call_or_define": {
          "description": "Two variants of this directive, chosen mainly by whether it ends with a code block or not.",
          "children": {
            "sequential": false,
            "definition": {
              "patterns": [
                "macro name:id",
                "arg names:id[]",
                "macro code:block"
              ]
            },
            "calling": {
              "patterns": [
                "macro name:id",
                "arg values:*[]"
              ]
            }
          }
        }
      },
      "attributes": [
        "DONT_DEREFERENCE",
        "DONT_DECORATE",
        "DOCUMENTABLE"
      ]
    },
    "$include": {
      "description": "Include File",
      "wiki_link": "Including-Other-Files.md",
      "details": "Places the contents of the given file in replacement for this statement. Not intended for production use yet.",
      "category": "preprocessor",
      "function": "_include",
      "syntax": [
        "file:string"
      ],
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$strfriendly": {
      "description": "Preprocessor String Friendly Name",
      "wiki_link": "Advanced-Variable-Commands.md#string-manipulation",
      "details": "Convert the given preprocessor variable value(s) to a string in 'Title Case'.",
      "category": "preprocessor",
      "function": "_strfriendly",
      "syntax": {
        "destructive": {
          "patterns": [
            "variable to modify:ppv"
          ]
        },
        "nondestructive": {
          "patterns": [
            "result:id",
            "variable:ppv"
          ]
        }
      },
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$strupper": {
      "description": "Preprocessor String Uppercase",
      "wiki_link": "Advanced-Variable-Commands.md#string-manipulation",
      "details": "Convert the given preprocessor variable value(s) to a string in 'UPPERCASE'.",
      "category": "preprocessor",
      "function": "_strupper",
      "syntax": {
        "destructive": {
          "patterns": [
            "variable to modify:ppv"
          ]
        },
        "nondestructive": {
          "patterns": [
            "result:id",
            "variable:ppv"
          ]
        }
      },
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$strlower": {
      "description": "Preprocessor String Lowercase",
      "wiki_link": "Advanced-Variable-Commands.md#string-manipulation",
      "details": "Convert the given preprocessor variable value(s) to a string in 'lowercase'.",
      "category": "preprocessor",
      "function": "_strlower",
      "syntax": {
        "destructive": {
          "patterns": [
            "variable to modify:ppv"
          ]
        },
        "nondestructive": {
          "patterns": [
            "result:id",
            "variable:ppv"
          ]
        }
      },
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$sum": {
      "description": "Preprocessor Array Sum",
      "wiki_link": "Advanced-Variable-Commands.md#data-manipulation",
      "details": "Adds all values in the given preprocessor variable together into one value and stores it in a result variable.",
      "category": "preprocessor",
      "function": "_sum",
      "syntax": {
        "destructive": {
          "patterns": [
            "variable to modify:ppv"
          ]
        },
        "nondestructive": {
          "patterns": [
            "result:id",
            "variable:ppv"
          ]
        }
      },
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$median": {
      "description": "Preprocessor Array Median",
      "wiki_link": "Advanced-Variable-Commands.md#data-manipulation",
      "details": "Gets the middle value/average of the two middle values and stores it in a result variable.",
      "category": "preprocessor",
      "function": "_median",
      "syntax": {
        "destructive": {
          "patterns": [
            "variable to modify:ppv"
          ]
        },
        "nondestructive": {
          "patterns": [
            "result:id",
            "variable:ppv"
          ]
        }
      },
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$mean": {
      "description": "Preprocessor Array Mean",
      "wiki_link": "Advanced-Variable-Commands.md#data-manipulation",
      "details": "Averages all values in the given preprocessor variable together into one value and stores it in a result variable.",
      "category": "preprocessor",
      "function": "_mean",
      "syntax": {
        "destructive": {
          "patterns": [
            "variable to modify:ppv"
          ]
        },
        "nondestructive": {
          "patterns": [
            "result:id",
            "variable:ppv"
          ]
        }
      },
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$sort": {
      "description": "Preprocessor Array Sort",
      "wiki_link": "Advanced-Variable-Commands.md#array-specific-manipulation",
      "details": "Sorts the order of the values in the given preprocessor variable either 'ascending' or 'descending'. Values must be comparable.",
      "category": "preprocessor",
      "function": "_sort",
      "syntax": {
        "one_of": {
          "children": {
            "ascending": {
              "keyword": "ascending",
              "description": "Sort variables starting with the lowest first.",
              "patterns": [
                "variable:id"
              ]
            },
            "descending": {
              "keyword": "descending",
              "description": "Sort variables starting with the highest first.",
              "patterns": [
                "variable:id"
              ]
            }
          }
        }
      },
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$reverse": {
      "description": "Preprocessor Reverse",
      "wiki_link": "Advanced-Variable-Commands.md#array-specific-manipulation",
      "details": "Reverses the order of the values in the given preprocessor variable.",
      "category": "preprocessor",
      "function": "_reverse",
      "syntax": [
        "variable:id"
      ],
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$unique": {
      "description": "Preprocessor Array Unique",
      "wiki_link": "Advanced-Variable-Commands.md#array-specific-manipulation",
      "details": "Flattens the given preprocessor array to only unique values.",
      "category": "preprocessor",
      "function": "_unique",
      "syntax": [
        "variable:id"
      ],
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$iterate": {
      "description": "Iterate Preprocessor Array",
      "details": "Runs the following statement/code-block once for each value in the given preprocessor variable. The current iteration is held in the preprocessor variable given. If the target is a JSON array, the elements will be iterated upon.",
      "category": "preprocessor",
      "function": "_iterate",
      "syntax": {
        "object_to_iterate": {
          "patterns": [
            [
              "variable:id"
            ],
            [
              "json array or object:json"
            ]
          ]
        },
        "current": {
          "description": "The name of the preprocessor variable to store the current iteration in.",
          "patterns": [
            "current:id"
          ]
        },
        "code": {
          "patterns": [
            "block to repeat:block?"
          ]
        }
      },
      "attributes": [
        "DONT_FLATTEN_ARRAYS",
        "DONT_DECORATE"
      ]
    },
    "$len": {
      "description": "Preprocessor Length",
      "wiki_link": "Advanced-Variable-Commands.md#data-manipulation",
      "details": "If a preprocessor variable identifier or JSON array is specified, the number of elements it holds is gotten. If a string is given, its length is gotten.",
      "category": "preprocessor",
      "function": "_len",
      "syntax": {
        "result": {
          "patterns": [
            "result:id"
          ]
        },
        "thing_to_get_length_of": {
          "patterns": [
            [
              "variable:ppv"
            ],
            [
              "json array:json"
            ],
            [
              "text:string"
            ]
          ]
        }
      },
      "attributes": [
        "DONT_FLATTEN_ARRAYS",
        "DONT_DECORATE"
      ]
    },
    "$json": {
      "description": "Preprocessor Load JSON Value",
      "wiki_link": "JSON-Processing.md",
      "details": "Load a JSON file (if not previously loaded) and retrieve a value from it, storing said value in a preprocessor variable.",
      "category": "preprocessor",
      "function": "_json",
      "syntax": {
        "source": {
          "description": "The source of the JSON. Either a file name, or an existing JSON object or array.",
          "patterns": [
            [
              "file name:string"
            ],
            [
              "existing json:json"
            ]
          ]
        },
        "result": {
          "patterns": [
            "result:id"
          ]
        },
        "path": {
          "blocking": true,
          "patterns": [
            "path:string"
          ]
        }
      },
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "$call": {
      "description": "Preprocessor Call Function",
      "wiki_link": "Metaprogramming.md#calling",
      "details": "Calls a function by name and passes in the given parameters. Because this is a preprocessor operation, it has the same error handling as a normal function call.",
      "category": "preprocessor",
      "function": "_call",
      "syntax": [
        "function name:string",
        "parameters:*[]"
      ]
    },
    "mc": {
      "description": "Minecraft Command",
      "aliases": [
        "command",
        "cmd"
      ],
      "details": "Places a plain command in the output file, used for when the language lacks a certain feature.",
      "category": "other",
      "syntax": [
        "command:string"
      ],
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "globalprint": {
      "description": "Print to All Players",
      "wiki_link": "Text-Commands.md#commands",
      "details": "Prints a chat message to all players in the game.",
      "category": "text",
      "syntax": [
        "text:string"
      ],
      "attributes": [
        "DONT_RESOLVE_STRINGS",
        "USES_FSTRING"
      ]
    },
    "print": {
      "description": "Print to Player",
      "wiki_link": "Text-Commands.md#commands",
      "details": "Prints a chat message to the executing player, or to the given one if specified.",
      "category": "text",
      "syntax": {
        "entity": {
          "description": "The entity to print to. If unspecified, assume @s.",
          "optional": true,
          "patterns": [
            "entity:selector"
          ]
        },
        "text": {
          "patterns": [
            "text:string"
          ]
        }
      },
      "attributes": [
        "DONT_RESOLVE_STRINGS",
        "USES_FSTRING"
      ]
    },
    "lang": {
      "description": "Set Active Language",
      "wiki_link": "Localization.md",
      "details": "Sets the active lang file (examples: en_US, pt_BR). Once set, all text will automatically be localized into that lang file; including format-strings.",
      "category": "text",
      "syntax": [
        "locale:id"
      ],
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "define": {
      "description": "Define Variable",
      "wiki_link": "Values.md#defining-values",
      "details": "Defines a variable with a name and type, defaulting to int if unspecified. Can be assigned a value directly after defining.",
      "category": "values",
      "syntax": {
        "start_attributes": {
          "optional": true,
          "patterns": [
            "attributes:attribute[]"
          ]
        },
        "type": {
          "optional": true,
          "children": {
            "int": {
              "description": "An integer, representing any whole value between -2147483648 to 2147483647.",
              "keyword": "int",
              "patterns": []
            },
            "decimal": {
              "description": "A decimal number with a pre-specified level of precision.",
              "keyword": "decimal",
              "patterns": [
                "precision:int"
              ]
            },
            "bool": {
              "description": "A true or false value.",
              "keyword": "bool",
              "patterns": []
            },
            "time": {
              "description": "A value representing a number of ticks. Displayed as MM:SS by default.",
              "keyword": "time",
              "patterns": []
            }
          }
        },
        "mid_attributes": {
          "optional": true,
          "patterns": [
            "attributes:attribute[]"
          ]
        },
        "name": {
          "patterns": [
            "name:id"
          ]
        },
        "default_value": {
          "optional": true,
          "patterns": [
            "set:equals",
            "default value:object"
          ]
        }
      },
      "attributes": [
        "DOCUMENTABLE",
        "DONT_DECORATE"
      ]
    },
    "init": {
      "description": "Initialize Variable",
      "wiki_link": "Values.md#initializing-values",
      "aliases": [
        "initialize"
      ],
      "details": "Ensures this variable has a value, defaulting to 0 if not. This ensures the executing entity(s) function as intended all the time. Use a clarifier to pick who the variable is initialized for: e.g., `variableName[@a]`",
      "category": "values",
      "syntax": [
        "value:value"
      ],
      "attributes": [
        "DOCUMENTABLE"
      ]
    },
    "if": {
      "description": "If Statement",
      "wiki_link": "Comparison.md",
      "details": "Performs a comparison, only running the proceeding statement/code-block if the comparisons(s) are true. Multiple comparisons can be chained using the keyword 'and', and comparisons can be inverted using the keyword 'not'",
      "category": "logic",
      "function": "ifStatement",
      "syntax": {
        "comparison": {
          "children": {
            "repeatable": true,
            "invert": {
              "keyword": "not",
              "description": "Invert the next comparison.",
              "optional": true,
              "patterns": []
            },
            "comparison": {
              "children": {
                "boolean_comparison": {
                  "patterns": [
                    "boolean value:value"
                  ]
                },
                "value_comparison": {
                  "patterns": [
                    [
                      "a:value",
                      "comparison:compare",
                      "b:value"
                    ],
                    [
                      "a:value",
                      "comparison:compare",
                      "b:object"
                    ]
                  ]
                },
                "entity_self_comparison": {
                  "patterns": [
                    "self selector:selector"
                  ]
                },
                "entity_count_comparison": {
                  "keyword": "count",
                  "description": "Count the number of matching entities and compare the result.",
                  "patterns": [
                    [
                      "selector:selector",
                      "comparison:compare",
                      "b:value"
                    ],
                    [
                      "selector:selector",
                      "comparison:compare",
                      "b:int"
                    ]
                  ]
                },
                "entity_any_comparison": {
                  "keyword": "any",
                  "description": "Check if any entities match the given selector.",
                  "patterns": [
                    "selector:selector"
                  ]
                },
                "block_comparison": {
                  "keyword": "block",
                  "description": "Check if a block matches a given filter.",
                  "patterns": [
                    "x:coordinate",
                    "y:coordinate",
                    "z:coordinate",
                    "block:string<minecraft_block>"
                  ]
                },
                "blocks_comparison": {
                  "keyword": "blocks",
                  "description": "Check if two regions of blocks are identical.",
                  "patterns": [
                    "region start x:coordinate",
                    "region start y:coordinate",
                    "region start z:coordinate",
                    "region end x:coordinate",
                    "region end y:coordinate",
                    "region end z:coordinate",
                    "destination x:coordinate",
                    "destination y:coordinate",
                    "destination z:coordinate",
                    "scan mode:id<blocks_scan_mode>"
                  ]
                }
              }
            },
            "and": {
              "keyword": "and",
              "blocking": true,
              "description": "Add another comparison.",
              "patterns": []
            }
          }
        },
        "ending": {
          "optional": true,
          "patterns": [
            "code:block"
          ]
        }
      }
    },
    "else": {
      "description": "Else Statement",
      "wiki_link": "Comparison.md#else",
      "details": "Inverts the comparison given by the previous if-statement at this scope level.",
      "category": "logic",
      "function": "elseStatement",
      "syntax": [
        "code:block?"
      ],
      "attributes": [
        "INVERTS_COMPARISON"
      ]
    },
    "while": {
      "description": "While Statement",
      "details": "Repeats the proceeding statement/code-block as long as a condition remains true.  Multiple comparisons can be chained using the keyword 'and', and comparisons can be inverted using the keyword 'not'",
      "category": "logic",
      "function": "whileLoop",
      "syntax_ref": "if"
    },
    "repeat": {
      "description": "Repeat N Times",
      "details": "Repeats the proceeding statement/code-block the given number of times. This command always runs at runtime.",
      "category": "logic",
      "syntax": {
        "repetitions_count": {
          "patterns": [
            [
              "repetitions:int"
            ],
            [
              "repetitions:value"
            ]
          ]
        },
        "current": {
          "optional": true,
          "patterns": [
            "current iteration value:id"
          ]
        },
        "block": {
          "patterns": [
            "block to repeat:block?"
          ]
        }
      }
    },
    "assert": {
      "description": "Assert Statement",
      "wiki_link": "Testing.md#writing-a-test",
      "details": "Asserts that the given condition evaluates to true, at runtime. If the condition evaluates to false, the code is halted and info is displayed to the executing player(s).",
      "category": "debug",
      "syntax_ref": "if.comparison"
    },
    "throw": {
      "description": "Throw Error",
      "wiki_link": "Debugging.md#throwing-errors",
      "details": "Throws an error, displaying it to the executing player(s). The code is halted immediately, so handle cleanup before calling throw.",
      "category": "debug",
      "function": "throwError",
      "syntax": [
        "error message:string"
      ],
      "attributes": [
        "USES_FSTRING"
      ]
    },
    "give": {
      "description": "Give Item",
      "wiki_link": "Giving-Items.md",
      "details": "Gives item(s) to the given entity. Runs either a 'give' or 'structure load' depending on requirements. Utilizes builder fields.",
      "category": "items",
      "syntax": {
        "basic_info": {
          "patterns": [
            "players:selector",
            "item:string<minecraft_item>",
            "count:int?",
            "data:int?"
          ]
        },
        "attributes": {
          "optional": true,
          "children": {
            "repeatable": true,
            "keep_inventory": {
              "keyword": "keep",
              "description": "Item will stay in the player's inventory even after death.",
              "patterns": []
            },
            "lock_in_inventory": {
              "keyword": "lockinventory",
              "description": "Lock the item in the player's inventory.",
              "patterns": []
            },
            "lock_slot": {
              "keyword": "lockslot",
              "description": "Lock the item in the slot it's located in inside the player's inventory.",
              "patterns": []
            },
            "can_place_on": {
              "keyword": "canplaceon: ",
              "description": "Adds a block that this block can be placed on in adventure mode.",
              "patterns": [
                "block:string<minecraft_block>"
              ]
            },
            "can_destroy": {
              "keyword": "candestroy: ",
              "description": "Adds a block that this tool/item can break in adventure mode.",
              "patterns": [
                "block:string<minecraft_block>"
              ]
            },
            "enchant": {
              "keyword": "enchant: ",
              "description": "Adds an enchantment to the item.",
              "patterns": [
                "enchantment:id<minecraft_enchantment>",
                "level:int"
              ]
            },
            "name": {
              "keyword": "name: ",
              "description": "Sets the display name of the item.",
              "patterns": [
                "display name:string"
              ]
            },
            "add_lore_line": {
              "keyword": "lore: ",
              "description": "Adds a line of lore to the item.",
              "patterns": [
                "lore line:string"
              ]
            },
            "book_title": {
              "keyword": "title: ",
              "description": "If the item is a written book, sets the title of the book.",
              "patterns": [
                "book title:string"
              ]
            },
            "book_author": {
              "keyword": "author: ",
              "description": "If the item is a written book, sets the author of the book.",
              "patterns": [
                "book author:string"
              ]
            },
            "book_add_page": {
              "keyword": "page: ",
              "description": "If the item is a written book, adds a page of text to the book.",
              "patterns": [
                "page content:string"
              ]
            },
            "leather_dye": {
              "keyword": "dye: ",
              "description": "If the item is leather armor, sets the dye color of the armor.",
              "patterns": [
                "red:int",
                "green:int",
                "blue:int"
              ]
            }
          }
        }
      }
    },
    "tp": {
      "description": "Teleport Entity",
      "aliases": [
        "teleport"
      ],
      "details": "Teleports the executing/given entities to a specific position, selector, or name of another managed entity (e.g., dummy entities).",
      "category": "entities",
      "syntax": {
        "victim": {
          "optional": true,
          "patterns": [
            "victim:selector"
          ]
        },
        "destination": {
          "patterns": [
            [
              "destination:selector"
            ],
            [
              "x:coordinate",
              "y:coordinate",
              "z:coordinate"
            ]
          ]
        },
        "rotation": {
          "blocking": true,
          "children": {
            "repeatable": true,
            "manual_rotation": {
              "description": "Manually set the rotation of the teleported entity.",
              "patterns": [
                "y rotation:coordinate",
                "x rotation:coordinate"
              ]
            },
            "facing": {
              "keyword": "facing",
              "description": "Set the position/entity the teleported entity will face.",
              "patterns": [
                [
                  "look at entity:selector"
                ],
                [
                  "look at x:coordinate",
                  "look at y:coordinate",
                  "look at z:coordinate"
                ]
              ]
            }
          }
        },
        "check_for_blocks": {
          "optional": false,
          "blocking": true,
          "patterns": [
            "check for blocks:bool"
          ]
        }
      }
    },
    "move": {
      "description": "Move Entity",
      "details": "Moves the specified entity in a direction (LEFT, RIGHT, UP, DOWN, FORWARD, BACKWARD) for a certain amount. Simpler alternative for teleporting using caret offsets.",
      "category": "entities",
      "syntax": [
        "entities:selector",
        "direction:id<move_direction>",
        "amount:number",
        "check for blocks:bool?"
      ]
    },
    "face": {
      "description": "Face Towards...",
      "aliases": [
        "lookat"
      ],
      "details": "Faces the given entities towards a specific position, selector, or name of another managed entity (e.g., dummy entities).",
      "category": "entities",
      "syntax": {
        "source": {
          "patterns": [
            "entities:selector"
          ]
        },
        "target": {
          "patterns": [
            [
              "target entity:selector"
            ],
            [
              "target x:coordinate",
              "target y:coordinate",
              "target z:coordinate"
            ]
          ]
        }
      }
    },
    "rotate": {
      "description": "Rotate Entity",
      "details": "Rotates the given entities a certain number of degrees horizontally and vertically from their current rotation.",
      "category": "entities",
      "syntax": [
        "entities:selector",
        "rotation y:int",
        "rotation x:int"
      ]
    },
    "setblock": {
      "description": "Set Block",
      "details": "Sets the block at a specific position, optionally using a replace mode.",
      "category": "blocks",
      "syntax": [
        "x:coordinate",
        "y:coordinate",
        "z:coordinate",
        "block:string<minecraft_block>",
        "data:int?",
        "replace mode:id<old_handling>?"
      ]
    },
    "fill": {
      "description": "Fill Region",
      "details": "Fills blocks in a specific region, optionally using a replace mode.",
      "category": "blocks",
      "syntax": [
        "x1:coordinate",
        "y1:coordinate",
        "z1:coordinate",
        "x2:coordinate",
        "y2:coordinate",
        "z2:coordinate",
        "block:string<minecraft_block>",
        "fill mode:id<old_handling>?",
        "data:int?"
      ]
    },
    "scatter": {
      "description": "Scatter Blocks in Region",
      "wiki_link": "Scatter.md",
      "details": "Randomly scatters blocks throughout a region with a certain percentage.",
      "category": "blocks",
      "syntax": [
        "block:string<minecraft_block>",
        "percent:int",
        "x1:coordinate",
        "y1:coordinate",
        "z1:coordinate",
        "x2:coordinate",
        "y2:coordinate",
        "z2:coordinate",
        "seed:string?"
      ]
    },
    "replace": {
      "description": "Replace in Region",
      "details": "Replaces all source blocks with a result block in a specific region.",
      "category": "blocks",
      "syntax": [
        "source block:string<minecraft_block>",
        "source data:int?",
        "x1:coordinate",
        "y1:coordinate",
        "z1:coordinate",
        "x2:coordinate",
        "y2:coordinate",
        "z2:coordinate",
        "result block:string<minecraft_block>",
        "result data:int?"
      ]
    },
    "kill": {
      "description": "Kill Entity",
      "details": "Kills the given entities, causing the death animation, sounds, and particles to appear.",
      "category": "entities",
      "syntax": [
        "target:selector?"
      ]
    },
    "clear": {
      "description": "Clear Entity",
      "details": "Clears the inventories of all given entities, optionally searching for a specific item and limiting the number of items to remove.",
      "category": "items",
      "syntax": [
        "target:selector?",
        "item:string<minecraft_item>?",
        "data:int?",
        "max count:int?"
      ]
    },
    "globaltitle": {
      "description": "Show Title to All Players",
      "wiki_link": "Text-Commands.md#commands",
      "details": "Displays a title on the screen of all players in the game. Can also be used to set the timings of the title.",
      "category": "text",
      "syntax": {
        "subcommand": {
          "children": {
            "title_times": {
              "keyword": "times",
              "description": "Set the timings for the next title/future titles.",
              "patterns": [
                "fade in:int",
                "stay:int",
                "fade out:int"
              ]
            },
            "title_subtitle": {
              "keyword": "subtitle",
              "description": "Set the subtitle for the next title displayed.",
              "patterns": [
                "subtitle text:string"
              ]
            },
            "title": {
              "patterns": [
                "title text:string"
              ]
            }
          }
        }
      },
      "attributes": [
        "DONT_RESOLVE_STRINGS",
        "USES_FSTRING"
      ]
    },
    "title": {
      "description": "Show Title",
      "wiki_link": "Text-Commands.md#commands",
      "details": "Displays a title on the screen of the executing player, or to the given one if specified. Can also be used to set the timings of the title.",
      "category": "text",
      "syntax": {
        "target": {
          "optional": true,
          "patterns": [
            "players:selector"
          ]
        },
        "subcommand": {
          "ref": "globaltitle.subcommand"
        }
      },
      "attributes": [
        "DONT_RESOLVE_STRINGS",
        "USES_FSTRING"
      ]
    },
    "globalactionbar": {
      "description": "Show Actionbar to All Players",
      "wiki_link": "Text-Commands.md#commands",
      "details": "Displays an actionbar on the screen of all players in the game. Can also be used to set the timings of the actionbar.",
      "category": "text",
      "syntax": [
        "text:string"
      ],
      "attributes": [
        "DONT_RESOLVE_STRINGS",
        "USES_FSTRING"
      ]
    },
    "actionbar": {
      "description": "Show Actionbar",
      "wiki_link": "Text-Commands.md#commands",
      "details": "Displays an actionbar on the screen of the executing player, or to the given one if specified.",
      "category": "text",
      "syntax": [
        "players:selector?",
        "text:string"
      ],
      "attributes": [
        "DONT_RESOLVE_STRINGS",
        "USES_FSTRING"
      ]
    },
    "say": {
      "description": "Say",
      "details": "Send a plain-text message as the executing entity. Plain selectors can be used, but not variables.",
      "category": "text",
      "syntax": [
        "message:string"
      ]
    },
    "camera": {
      "description": "Camera",
      "details": "Modify the camera of the given players, identical to the vanilla command with much more fault-tolerance.",
      "category": "cosmetic",
      "syntax": {
        "players": {
          "patterns": [
            "players:selector"
          ]
        },
        "subcommand": {
          "children": {
            "camera_clear": {
              "keyword": "clear",
              "description": "Clears the camera of the given players, setting it back to default.",
              "patterns": []
            },
            "camera_fade": {
              "keyword": "fade",
              "description": "Fade the camera in and out with a given color.",
              "children": {
                "repeatable": true,
                "fade_time": {
                  "keyword": "time",
                  "description": "Specify the in/hold/out times of the fade, in seconds.",
                  "patterns": [
                    "fade in seconds:number",
                    "hold seconds:number",
                    "fade out seconds:number"
                  ]
                },
                "fade_color": {
                  "keyword": "color",
                  "description": "Specify the color of the fade.",
                  "patterns": [
                    "red:int",
                    "green:int",
                    "blue:int"
                  ]
                }
              }
            },
            "camera_set": {
              "keyword": "set",
              "description": "Set the camera for the given players.",
              "children": {
                "sequential": true,
                "preset": {
                  "patterns": [
                    "preset:string<camera_preset>"
                  ]
                },
                "camera_set_subcommands": {
                  "children": {
                    "repeatable": true,
                    "default": {
                      "keyword": "default",
                      "description": "The default settings for the camera. Not necessary as it can be inferred.",
                      "patterns": []
                    },
                    "entity_offset": {
                      "keyword": "entity_offset",
                      "description": "Offset the camera relative to its entity (world space).",
                      "patterns": [
                        "offset x:number",
                        "offset y:number",
                        "offset z:number"
                      ]
                    },
                    "view_offset": {
                      "keyword": "view_offset",
                      "description": "Offset the camera relative to its entity (screen space).",
                      "patterns": [
                        "offset x:number",
                        "offset y:number"
                      ]
                    },
                    "ease": {
                      "keyword": "ease",
                      "description": "Causes the camera to smoothly transition from its previous setting.",
                      "patterns": [
                        "duration seconds:number",
                        "ease type:id<easing>"
                      ]
                    },
                    "facing": {
                      "keyword": "facing",
                      "description": "Rotate the camera to face either an entity, or a position in the world.",
                      "patterns": [
                        [
                          "face entity:selector"
                        ],
                        [
                          "face x:coordinate",
                          "face y:coordinate",
                          "face z:coordinate"
                        ]
                      ]
                    },
                    "positioned": {
                      "keyword": "pos",
                      "description": "Sets the camera's position. Only really relevant when using the 'minecraft:free' preset.",
                      "patterns": [
                        "x:coordinate",
                        "y:coordinate",
                        "z:coordinate"
                      ]
                    },
                    "rotated": {
                      "keyword": "rot",
                      "description": "Sets the camera's rotation. Only really relevant when using the 'minecraft:free' preset.",
                      "patterns": [
                        "x rotation:coordinate",
                        "y rotation:coordinate"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "halt": {
      "description": "Halt Execution",
      "wiki_link": "Debugging.md#halting-code",
      "details": "Ends the execution of the code entirely by hitting the function command limit.",
      "category": "logic"
    },
    "summon": {
      "description": "Summon Entity",
      "details": "Summons an entity; matches Minecraft vanilla syntax.",
      "category": "entities",
      "syntax": {
        "entity_type": {
          "patterns": [
            "entity type:id<minecraft_entity>"
          ]
        },
        "wacky_ass_combos": {
          "optional": true,
          "children": {
            "name_tag_prefix": {
              "patterns": [
                "name tag:string",
                "x:coordinate?",
                "y:coordinate?",
                "z:coordinate?"
              ]
            },
            "regular": {
              "children": {
                "sequential": true,
                "position": {
                  "patterns": [
                    "x:coordinate",
                    "y:coordinate",
                    "z:coordinate"
                  ]
                },
                "rotation": {
                  "blocking": true,
                  "children": {
                    "manual_rotation": {
                      "patterns": [
                        "rotation y:coordinate",
                        "rotation x:coordinate"
                      ]
                    },
                    "facing_rotation": {
                      "keyword": "facing",
                      "description": "Spawn the entity facing a particular position or entity.",
                      "children": {
                        "facing_entity": {
                          "patterns": [
                            "face entity:selector"
                          ]
                        },
                        "facing_position": {
                          "patterns": [
                            "face x:coordinate",
                            "face y:coordinate",
                            "face z:coordinate"
                          ]
                        }
                      }
                    }
                  }
                },
                "spawn_event": {
                  "blocking": true,
                  "patterns": [
                    "spawn event:string"
                  ]
                },
                "name_tag": {
                  "optional": true,
                  "patterns": [
                    "name tag:string"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "damage": {
      "description": "Damage Entity",
      "details": "Damages the given entities with a certain cause, optionally coming from a position or blaming an entity by a selector, or name of another managed entity (e.g., dummy entities).",
      "category": "entities",
      "syntax": {
        "basic": {
          "patterns": [
            "targets:selector",
            "amount:int"
          ]
        },
        "damage_cause": {
          "blocking": true,
          "patterns": [
            "damage cause:id<damage_cause>"
          ]
        },
        "blame": {
          "optional": true,
          "children": {
            "blame_entity": {
              "patterns": [
                "blame:selector"
              ]
            },
            "blame_from_position": {
              "patterns": [
                "from x:coordinate",
                "from y:coordinate",
                "from z:coordinate"
              ]
            }
          }
        }
      }
    },
    "effect": {
      "description": "Give Effect to Entity",
      "details": "Gives the given entities a potion effect. Time and amplifier can be specified to further customize the potion effect. All potion effects can be cleared using 'effect \\<selector\\> clear'.",
      "category": "entities",
      "syntax": {
        "target": {
          "patterns": [
            "entities:selector"
          ]
        },
        "subcommand": {
          "children": {
            "clear": {
              "keyword": "clear",
              "description": "Clears all effects from the given entities.",
              "patterns": []
            },
            "give": {
              "patterns": [
                "effect:id<minecraft_effect>",
                "seconds:int?",
                "amplifier:int?",
                "hide particles:bool?"
              ]
            }
          }
        }
      }
    },
    "playsound": {
      "description": "Play Sound",
      "wiki_link": "Playsound.md",
      "details": "Plays a sound effect in the world, optionally with volume, pitch, and filtering specific players.",
      "category": "cosmetic",
      "syntax": [
        "sound:string",
        "who:selector?",
        "x:coordinate?",
        "y:coordinate?",
        "z:coordinate?",
        "volume:number?",
        "pitch:number?",
        "minimum volume:number?"
      ]
    },
    "particle": {
      "description": "Spawn Particle",
      "details": "Spawns a particle effect in the world.",
      "category": "cosmetic",
      "syntax": [
        "effect:string",
        "x:coordinate?",
        "y:coordinate?",
        "z:coordinate?"
      ]
    },
    "dummy": {
      "description": "Manage Dummy Entities",
      "wiki_link": "Optional-Features.md#dummies",
      "details": "Create a dummy entity, remove the selected ones, or manage the classes on the selected ones. Requires feature 'DUMMIES' to be enabled.",
      "category": "features",
      "features": 1,
      "syntax": {
        "subcommand": {
          "children": {
            "dummy_create": {
              "keyword": "create",
              "description": "Create a new dummy entity.",
              "patterns": [
                "name:string",
                "tag:string?",
                "x:coordinate?",
                "y:coordinate?",
                "z:coordinate?"
              ]
            },
            "dummy_single": {
              "keyword": "single",
              "description": "Create a new dummy entity, removing any others with a matching name/tag.",
              "patterns": [
                "name:string",
                "tag:string?",
                "x:coordinate?",
                "y:coordinate?",
                "z:coordinate?"
              ]
            },
            "dummy_remove_all": {
              "keyword": "removeall",
              "description": "Remove all dummies in the world, or only ones with a specific tag.",
              "patterns": [
                "tag:string?"
              ]
            },
            "dummy_remove": {
              "keyword": "remove",
              "description": "Remove all dummies with the given name, and optionally tag.",
              "patterns": [
                "name:string",
                "tag:string?"
              ]
            }
          }
        }
      }
    },
    "tag": {
      "description": "Tag Entity",
      "details": "Add and remove tags from the given entity.",
      "category": "entities",
      "syntax": {
        "entities": {
          "patterns": [
            "entities:selector"
          ]
        },
        "subcommand": {
          "children": {
            "add": {
              "keyword": "add",
              "description": "Add a tag to the given entities.",
              "patterns": [
                "tag name:string"
              ]
            },
            "remove": {
              "keyword": "remove",
              "description": "Remove a tag from the given entities.",
              "patterns": [
                "tag name:string"
              ]
            }
          }
        }
      }
    },
    "explode": {
      "description": "Create Explosion",
      "wiki_link": "Optional-Features.md#exploders",
      "details": "Create an explosion at a specific position with optional positioning, power, delay, fire, and block breaking settings. Requires feature 'EXPLODERS' to be enabled.",
      "category": "features",
      "features": 4,
      "syntax": [
        "x:coordinate?",
        "y:coordinate?",
        "z:coordinate?",
        "power:int?",
        "delay:int?",
        "causes fire:bool?",
        "breaks blocks:bool?"
      ]
    },
    "feature": {
      "description": "Enable Feature",
      "wiki_link": "Optional-Features.md",
      "details": "Enables a feature to be used for this project, generating any of the necessary files.",
      "category": "features",
      "syntax": [
        "feature:id<feature>"
      ],
      "attributes": [
        "DONT_DECORATE"
      ]
    },
    "function": {
      "description": "Define Function",
      "wiki_link": "Functions.md#defining-functions",
      "aliases": [
        "fn"
      ],
      "details": "Defines a function. Must be followed by a code-block. Parameters must have types, optionally having default values. Function calls look like this: `functionName(parameters)`",
      "category": "logic",
      "syntax": {
        "start_attributes": {
          "optional": true,
          "patterns": [
            "attributes:attribute[]"
          ]
        },
        "function_name": {
          "patterns": [
            "function name:id"
          ]
        },
        "mid_attributes": {
          "optional": true,
          "patterns": [
            "attributes:attribute[]"
          ]
        },
        "open_parenthesis": {
          "optional": true,
          "patterns": [
            "open parenthesis:open_paren"
          ]
        },
        "parameters": {
          "optional": true,
          "children": {
            "repeatable": true,
            "parameter_definition": {
              "ref": "define"
            }
          }
        },
        "close_parenthesis": {
          "optional": true,
          "patterns": [
            "close parenthesis:close_paren"
          ]
        },
        "block": {
          "description": "Not required since extern functions don't require bodies.",
          "blocking": true,
          "patterns": [
            "function code:block"
          ]
        }
      },
      "attributes": [
        "DONT_DECORATE",
        "DOCUMENTABLE"
      ]
    },
    "test": {
      "description": "Define Test",
      "wiki_link": "Testing.md#writing-a-test",
      "details": "Defines a test; requires 'tests' feature. Must be followed by a code-block that contains the test contents.",
      "category": "debug",
      "syntax": [
        "name:id",
        "test contents:block"
      ],
      "attributes": [
        "DONT_DECORATE",
        "DOCUMENTABLE"
      ]
    },
    "return": {
      "description": "Set Return Value",
      "wiki_link": "Functions.md#return-values",
      "details": "Set the value that will be returned from this function when it ends. The caller can use this value however it wishes.",
      "category": "logic",
      "function": "returnFromFunction",
      "syntax": {
        "one_of": {
          "patterns": [
            [
              "return value:value"
            ],
            [
              "return value:object"
            ]
          ]
        }
      }
    },
    "dialogue": {
      "description": "Define/Open Dialogue",
      "wiki_link": "Dialogue.md",
      "details": "If followed by a block, defines a new dialogue scene with the given name.",
      "category": "text",
      "syntax": {
        "subcommand": {
          "children": {
            "dialogue_new": {
              "keyword": "new",
              "description": "Creates a new dialogue scene.",
              "patterns": [
                "scene tag:string",
                "definition:block"
              ]
            },
            "dialogue_open": {
              "keyword": "open",
              "description": "Opens a dialogue scene for the given players.",
              "patterns": [
                "npc:selector",
                "players:selector",
                "scene tag:string?"
              ]
            },
            "dialogue_change": {
              "keyword": "change",
              "description": "Change the dialogue for the given NPC, optionally only for specific players.",
              "patterns": [
                "npc:selector",
                "scene tag:string",
                "for players:selector?"
              ]
            }
          }
        }
      }
    },
    "for": {
      "description": "For Each Entity",
      "wiki_link": "Loops.md#for",
      "details": "Runs the following statement or code-block once over every entity that matches a selector at its current position. Functionally equivalent to `execute as <selector> at @s run <code>`",
      "category": "logic",
      "function": "forEntities",
      "syntax": {
        "entities": {
          "patterns": [
            "entities:selector"
          ]
        },
        "offset_position": {
          "optional": true,
          "keyword": "at",
          "description": "Offset the execution position per entity.",
          "patterns": [
            "x:coordinate",
            "y:coordinate",
            "z:coordinate"
          ]
        },
        "code": {
          "patterns": [
            "code to run:block?"
          ]
        }
      }
    },
    "execute": {
      "description": "Execute",
      "details": "Begins a vanilla Minecraft execute chain. Can be followed by a statement or code-block, but does not explicitly support the 'run' subcommand.",
      "category": "logic",
      "syntax": {
        "subcommands_collection": {
          "children": {
            "repeatable": true,
            "subcommand": {
              "children": {
                "execute_align": {
                  "keyword": "align",
                  "description": "Aligns the current position of the command to the block grid.",
                  "patterns": [
                    "alignment:id<grid_alignment>"
                  ]
                },
                "execute_anchored": {
                  "keyword": "anchored",
                  "description": "Execute at the location of a specific part of the executing entity; The eyes or the feet.",
                  "patterns": [
                    "anchor point:id<anchor_position>"
                  ]
                },
                "execute_as": {
                  "keyword": "as",
                  "description": "Execute as the given entity/entities.",
                  "patterns": [
                    "entities:selector"
                  ]
                },
                "execute_at": {
                  "keyword": "at",
                  "description": "Execute at the position of the given entity.",
                  "patterns": [
                    "entity:selector"
                  ]
                },
                "execute_facing": {
                  "keyword": "facing",
                  "description": "Execute facing another position/entity.",
                  "children": {
                    "position": {
                      "patterns": [
                        "facing x:coordinate",
                        "facing y:coordinate",
                        "facing z:coordinate"
                      ]
                    },
                    "entity": {
                      "keyword": "entity",
                      "description": "Execute facing another entity.",
                      "patterns": [
                        "entity:selector"
                      ]
                    }
                  }
                },
                "execute_if": {
                  "keyword": "if",
                  "description": "Execute if a certain condition passes.",
                  "children": {
                    "score": {
                      "keyword": "score",
                      "description": "Execute if a value/scoreboard objective matches a condition.",
                      "children": {
                        "sequential": true,
                        "a": {
                          "patterns": [
                            "a:value"
                          ]
                        },
                        "middle": {
                          "children": {
                            "simple_a_b": {
                              "patterns": [
                                "comparison:compare",
                                "b:value"
                              ]
                            },
                            "range_match": {
                              "keyword": "matches",
                              "description": "Check if 'a' matches a certain number range.",
                              "patterns": [
                                "range:range"
                              ]
                            }
                          }
                        }
                      }
                    },
                    "entity": {
                      "keyword": "entity",
                      "description": "Execute if a selector matches.",
                      "patterns": [
                        "pattern:selector"
                      ]
                    },
                    "block": {
                      "keyword": "block",
                      "description": "Execute if a block matches.",
                      "patterns": [
                        "x:coordinate",
                        "y:coordinate",
                        "z:coordinate",
                        "block:id<minecraft_block>"
                      ]
                    },
                    "blocks": {
                      "keyword": "blocks",
                      "description": "Execute if two regions of blocks match.",
                      "patterns": [
                        "start x:coordinate",
                        "start y:coordinate",
                        "start z:coordinate",
                        "end x:coordinate",
                        "end y:coordinate",
                        "end z:coordinate",
                        "destination x:coordinate",
                        "destination y:coordinate",
                        "destination z:coordinate",
                        "scan mode:id<blocks_scan_mode>"
                      ]
                    }
                  }
                },
                "execute_unless": {
                  "keyword": "unless",
                  "description": "Execute unless a certain condition passes.",
                  "children": {
                    "score": {
                      "keyword": "score",
                      "description": "Execute unless a value/scoreboard objective matches a condition.",
                      "children": {
                        "sequential": true,
                        "a": {
                          "patterns": [
                            "a:value"
                          ]
                        },
                        "middle": {
                          "children": {
                            "simple_a_b": {
                              "patterns": [
                                "comparison:compare",
                                "b:value"
                              ]
                            },
                            "range_match": {
                              "keyword": "matches",
                              "description": "Check if 'a' doesn't match a certain number range.",
                              "patterns": [
                                "range:range"
                              ]
                            }
                          }
                        }
                      }
                    },
                    "entity": {
                      "keyword": "entity",
                      "description": "Execute unless a selector matches.",
                      "patterns": [
                        "pattern:selector"
                      ]
                    },
                    "block": {
                      "keyword": "block",
                      "description": "Execute unless a block matches.",
                      "patterns": [
                        "x:coordinate",
                        "y:coordinate",
                        "z:coordinate",
                        "block:id<minecraft_block>"
                      ]
                    },
                    "blocks": {
                      "keyword": "blocks",
                      "description": "Execute unless two regions of blocks match.",
                      "patterns": [
                        "start x:coordinate",
                        "start y:coordinate",
                        "start z:coordinate",
                        "end x:coordinate",
                        "end y:coordinate",
                        "end z:coordinate",
                        "destination x:coordinate",
                        "destination y:coordinate",
                        "destination z:coordinate",
                        "scan mode:id<blocks_scan_mode>"
                      ]
                    }
                  }
                },
                "in": {
                  "keyword": "in",
                  "description": "Execute in a specific dimension.",
                  "patterns": [
                    "dimension:id<dimension>"
                  ]
                },
                "positioned": {
                  "keyword": "positioned",
                  "description": "Change the execution position while keeping the current rotation.",
                  "patterns": [
                    [
                      "match entity:selector"
                    ],
                    [
                      "x:coordinate",
                      "y:coordinate",
                      "z:coordinate"
                    ]
                  ]
                },
                "rotated": {
                  "keyword": "rotated",
                  "description": "Change the execution rotation while keeping the current position.",
                  "patterns": [
                    [
                      "match entity:selector"
                    ],
                    [
                      "yaw:coordinate",
                      "pitch:coordinate"
                    ]
                  ]
                }
              }
            }
          }
        },
        "code": {
          "patterns": [
            "code:block?"
          ]
        }
      }
    },
    "await": {
      "description": "Await (async)",
      "wiki_link": "Async.md#awaiting",
      "details": "Works in async functions. Awaits a certain amount of time, for a condition to be met, or another async function to complete executing.",
      "category": "logic",
      "syntax": {
        "one_of": {
          "children": {
            "time": {
              "patterns": [
                "ticks:int"
              ]
            },
            "until": {
              "keyword": "until",
              "description": "Wait until a certain condition is met. It will be checked once at the end of every tick.",
              "ref": "if.comparison"
            },
            "while": {
              "keyword": "while",
              "description": "Wait as long as a certain condition is met. It will be checked once at the end of every tick.",
              "ref": "if.comparison"
            },
            "awaitable": {
              "description": "Returned by async functions. Allows you wait for another function to finish.",
              "patterns": [
                "awaitable:awaitable"
              ]
            }
          }
        }
      },
      "attributes": [
        "CAUSES_ASYNC_SPLIT"
      ]
    }
  }
}
