using System;
using System.IO;
using mc_compiled.MCC;
using mc_compiled.MCC.Compiler;
using mc_compiled.Modding.Manifest;
using mc_compiled.Modding.Manifest.Dependencies;
using mc_compiled.Modding.Manifest.Modules;
using Range = mc_compiled.Commands.Range;

namespace mc_compiled.CLI.Commands;

public class GenerateManifestWizardCommand(string[] inputArgs) : CommandLineOption(inputArgs)
{
    public override string LongName => "generatemanifest";
    public override string ShortName => null;
    public override string Description => "A little interactive wizard for generating new unique BP/RP manifest(s).";
    public override bool IsRunnable => true;
    public override Range ArgCount => new(0, 1);
    public override string[] ArgNames => ["project name"];
    public override CommandLineOption CreateNewWithArgs(string[] args)
    {
        return new GenerateManifestWizardCommand(args);
    }
    public override void Run(WorkspaceManager workspaceManager,
        Context context,
        CommandLineOption[] allNonRunnableOptions,
        ref string[] files)
    {
        files = null; // prevent further execution
        ConsoleColor originalColor = Console.ForegroundColor;
        string projectName = null;

        Console.ForegroundColor = ConsoleColor.White;
        if (this.inputArgs.Length > 0)
        {
            projectName = this.inputArgs[0];
            Console.WriteLine("Project name: '{0}'", projectName);
        }
        else
        {
            while (projectName == null)
            {
                Console.Write("Enter a project name: ");
                projectName = Console.ReadLine();
            }
        }

        // figure out if they want a BP, RP, or both
        Console.ForegroundColor = ConsoleColor.Cyan;
        Console.WriteLine("[B] Behavior Pack");
        Console.WriteLine("[R] Resource Pack");
        Console.WriteLine("[ENTER] Both");
        Console.ForegroundColor = ConsoleColor.White;

        bool bp = false, rp = false;

        ConsoleKeyInfo key;
        while (true)
        {
            key = Console.ReadKey(true);
            if (key.Key == ConsoleKey.B)
            {
                bp = true;
                break;
            }

            if (key.Key == ConsoleKey.R)
            {
                rp = true;
                break;
            }

            if (key.Key == ConsoleKey.Enter)
            {
                bp = rp = true;
                break;
            }
        }

        Console.WriteLine("Generating behavior pack: {0}", bp ? "yes" : "no");
        Console.WriteLine("Generating resource pack: {0}", rp ? "yes" : "no");

        string bpName = projectName + "_BP";
        string rpName = projectName + "_RP";
        string bpDirectory = Path.Combine(Environment.CurrentDirectory, bpName);
        string rpDirectory = Path.Combine(Environment.CurrentDirectory, rpName);

        Manifest behaviorPack = null, resourcePack = null;

        if (bp)
        {
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("Enable scripting for the behavior pack?");
            Console.WriteLine("\t[Y] Yes");
            Console.WriteLine("\t[N] No");

            bool enableScripting;
            while (true)
            {
                key = Console.ReadKey(true);
                if (key.Key == ConsoleKey.Y)
                {
                    enableScripting = true;
                    break;
                }

                if (key.Key == ConsoleKey.N)
                {
                    enableScripting = false;
                    break;
                }
            }

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine("Creating behavior pack directory...");
            Directory.CreateDirectory(bpDirectory);

            behaviorPack = new Manifest(ManifestType.BP, projectName)
            {
                header =
                {
                    name = "pack.name",
                    description = "pack.description",
                    version = ManifestVersion.DEFAULT
                }
            };
            behaviorPack.modules.Add(new BasicModule(ModuleType.data));

            if (enableScripting)
            {
                string scriptDirectory = Path.Combine(bpDirectory, "scripts");
                string scriptPath = Path.Combine(scriptDirectory, "main.js");

                Console.WriteLine("Creating script directory...");
                Directory.CreateDirectory(scriptDirectory);
                Console.WriteLine("Writing sample scripts/main.js...");
                File.WriteAllLines(scriptPath, [
                    "import { world, system } from '@minecraft/server';",
                    "",
                    "// Sample script generated by MCCompiled",
                    "system.runInterval(function () {",
                    "\tworld.sendMessage('Hello, world! (from script)')",
                    "}, 10);"
                ]);

                ManifestVersion scriptVersion = ManifestVersion.GetLatestScriptVersion();
                Console.WriteLine("Using @minecraft/server version " + scriptVersion);

                behaviorPack.modules.Add(new ScriptModule(null, ScriptLanguage.javascript, "scripts/main.js"));
                behaviorPack.dependencies.Add(new DependencyModule("@minecraft/server", scriptVersion));
                Console.WriteLine("Enabled scripting on behavior pack.");
            }

            DoSimpleLocalization(bpDirectory, projectName + " (BP)",
                "Behavior pack auto-generated by MCCompiled");
        }

        if (rp)
        {
            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine("Creating resource pack directory...");
            Directory.CreateDirectory(rpDirectory);

            resourcePack = new Manifest(ManifestType.RP, projectName)
            {
                header =
                {
                    name = "pack.name",
                    description = "pack.description",
                    version = ManifestVersion.DEFAULT
                }
            };
            resourcePack.modules.Add(new BasicModule(ModuleType.resources));

            DoSimpleLocalization(rpDirectory, projectName + " (RP)",
                "Resource pack auto-generated by MCCompiled");
        }

        // link them together as dependencies
        if (bp && rp)
        {
            behaviorPack.dependencies.Add(new DependencyUUID(resourcePack.header.uuid, ManifestVersion.DEFAULT));
            resourcePack.dependencies.Add(new DependencyUUID(behaviorPack.header.uuid, ManifestVersion.DEFAULT));
        }

        // write the manifests to disk
        Console.ForegroundColor = ConsoleColor.DarkGray;
        if (bp)
        {
            Console.WriteLine("Writing behavior pack manifest...");
            File.WriteAllBytes(Path.Combine(bpDirectory, behaviorPack.GetOutputFile()), behaviorPack.GetOutputData());
        }

        if (rp)
        {
            Console.WriteLine("Writing resource pack manifest...");
            File.WriteAllBytes(Path.Combine(rpDirectory, resourcePack.GetOutputFile()), resourcePack.GetOutputData());
        }

        Console.ForegroundColor = ConsoleColor.Green;
        Console.WriteLine("Done!");
        if (bp)
            Console.WriteLine("\tBehavior pack location: {0}", bpDirectory);
        if (rp)
            Console.WriteLine("\tResource pack location: {0}", rpDirectory);

        Console.ForegroundColor = originalColor;
        return;

        void DoSimpleLocalization(string rootDirectory, string packName, string packDescription)
        {
            string textsDirectory = Path.Combine(rootDirectory, "texts");
            string languagesJSON = Path.Combine(textsDirectory, "languages.json");
            string enUSLang = Path.Combine(textsDirectory, "en_US.lang");

            Console.WriteLine("Creating texts directory...");
            Directory.CreateDirectory(textsDirectory);
            Console.WriteLine("Writing 'languages.json'...");
            File.WriteAllText(languagesJSON, """
                                             [
                                                "en_US"
                                             ]
                                             """);
            Console.WriteLine("Writing 'en_US.lang'...");
            File.WriteAllText(enUSLang, $"""
                                         pack.name={packName}
                                         pack.description={packDescription}
                                         """);
            Console.WriteLine($"Done writing localization files in directory '{rootDirectory}'");
        }
    }
}